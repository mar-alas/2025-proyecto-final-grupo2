name: Test Backend
on:
  push:
    branches:
      - main
      - '**'
  pull_request:
    branches:
      - main
jobs:
  test_gestor_compras:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/compras_servicio/gestor_compras
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/compras_servicio/gestor_compras
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/backend/seedwork_compartido:$PWD/backend/compras_servicio/gestor_compras" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s compras_servicio/gestor_compras/tests
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_gestor_productos:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/inventario_servicio/gestor_productos
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/inventario_servicio/gestor_productos
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/backend/seedwork_compartido:$PWD/backend/inventario_servicio/gestor_productos" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s inventario_servicio/gestor_productos/tests
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_gestor_stock:
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/inventario_servicio/gestor_stock
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/inventario_servicio/gestor_stock
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        working-directory: ./backend
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
          UTEST: "True"
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s inventario_servicio/gestor_stock
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_gestor_proveedores:
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/inventario_servicio/gestor_proveedores
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/inventario_servicio/gestor_proveedores
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        working-directory: ./backend
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
          UTEST: "True"
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s inventario_servicio/gestor_proveedores
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_generador_reportes_logistica:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/logistica_servicio/generador_reportes
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/logistica_servicio/generador_reportes
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/backend/seedwork_compartido:$PWD/backend/logistica_servicio/generador_reportes" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s logistica_servicio/generador_reportes/tests
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_gestor_rutas_entrega:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/logistica_servicio/generador_rutas_entrega
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/logistica_servicio/generador_rutas_entrega
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/backend/seedwork_compartido:$PWD/backend/logistica_servicio/generador_rutas_entrega" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s logistica_servicio/generador_rutas_entrega/tests
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_gestor_entregas:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/logistica_servicio/gestor_entregas
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/logistica_servicio/gestor_entregas
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/backend/seedwork_compartido:$PWD/backend/logistica_servicio/gestor_entregas" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s logistica_servicio/gestor_entregas/tests
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_generador_reportes_ventas:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/ventas_servicio/generador_reportes
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/ventas_servicio/generador_reportes
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/backend/seedwork_compartido:$PWD/backend/ventas_servicio/generador_reportes" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s ventas_servicio/generador_reportes/tests
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_gestor_ventas:
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/ventas_servicio/gestor_ventas
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/ventas_servicio/gestor_ventas
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        working-directory: ./backend
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
          UTEST: "True"
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s ventas_servicio/gestor_ventas
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_procesador_pedidos:
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/ventas_servicio/procesador_pedidos
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/ventas_servicio/procesador_pedidos
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        working-directory: ./backend
        run: echo "PYTHONPATH=$PWD/ventas_servicio/procesador_pedidos:$PWD" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
          UTEST: "True"
        run: coverage run --source=ventas_servicio/procesador_pedidos --omit="*/tests/*,*/__init__.py" -m unittest discover -s ventas_servicio/procesador_pedidos
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_procesador_video:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - uses: actions/checkout@v2
      - name: Install pipenv
        working-directory: ./backend/ventas_servicio/procesador_video
        run: pip install pipenv
      - name: Install dependencies
        working-directory: ./backend/ventas_servicio/procesador_video
        run: pip install -r requirements.txt
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD/backend/seedwork_compartido:$PWD/backend/ventas_servicio/procesador_video" >> $GITHUB_ENV
      - name: Print PYTHONPATH
        run: echo $PYTHONPATH
      - name: Run unit tests
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ env.PYTHONPATH }}
        run: coverage run --omit="*/tests/*,*/__init__.py" -m unittest discover -s ventas_servicio/procesador_video/tests
      - name: Run coverage report
        working-directory: ./backend
        run: coverage report --fail-under=80

  test_gestor_usuarios:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
    steps:
      - uses: actions/checkout@v2

      - name: Create virtual environment
        working-directory: ./backend/seguridad_servicio
        run: python3 -m venv venv

      - name: Activate virtual environment and install dependencies
        working-directory: ./backend/seguridad_servicio
        run: |
          source venv/bin/activate
          pip install -r requirements-test-gestor-usuarios.txt

      - name: Run unit tests with coverage
        working-directory: ./backend/seguridad_servicio
        run: |
          source venv/bin/activate
          coverage run --source=gestor_usuarios -m pytest
          coverage report -m
          coverage_percentage=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          if (( $(echo "$coverage_percentage < 70" | bc -l) )); then
            echo "ERROR: La cobertura de pruebas es menor al 70% ($coverage_percentage%)"
            exit 1
          fi